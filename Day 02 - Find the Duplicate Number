/* Floyd’s Tortoise and Hare - Cycle Detection - Fast and Slow pointer */

class Solution {
	public int findDuplicate(int[] nums) {
		int slow = 0, fast = 0;
		do {
			slow = nums[slow];
			fast = nums[nums[fast]];
		} while (slow != fast);
		slow = 0;
		while (fast != slow) {
			slow = nums[slow];
			fast = nums[fast];
		}
		return fast;
	}
}

TC : O(n)
SC : O(n)


/* DYNAMIC PROGRAMMING O(n) BEATS 98% */
class Solution {
    public int findDuplicate(int[] nums) {
        int count[] = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            count[nums[i]]++;
        }
        for(int i=0;i<nums.length;i++){
            if(count[i]>1) return i;
        }
        return -1;
    }
}

LOGIC : 
The idea is to observe the fact that all array elements contain a value between 1 to N - 1. 
Our approach will be to construct an array to store the frequency of each element in the given array. 
We create a count array first which will have the frequency of each element of arraylist. 
Whoseever frequency is greater than 1 will be the duplicate.



/* USING HASHSET BEATS 38% */
class Solution {
    public int findDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(!set.contains(nums[i])) set.add(nums[i]);
            else return nums[i];
        }
        return -1;
    }
}

LOGIC - We can use a set in python to store occurences of a number
-If a number in the list has not been seen before, we add it to the set
-If a number already seen and stored in the set appears, we found a duplicate
Time Complexity: O(n): Sets in Python rely on underlying hash tables so insertions and lookups have constant time complexities. The algorithm is linear as it only loops through list once.
Space Complexity: O(n): Worst case scenario the duplicate element will appear 2x with one appearance at n-1. 
In this case the set will have n-1 distinct values and occupy O(n) space becuase n-1 elements are stored in the set.


/* Marking visited value within the array BEATS 62% */
class Solution {
    public int findDuplicate(int[] nums) {
        for (int i = 0; i < nums.length; i++) {
            int index = Math.abs(nums[i]);  //since some of the nums[i] could already turned -ve to continue iterating absolute
            if (nums[index] < 0) {
                return Math.abs(nums[i]);   //since its -ve means already visited hence duplicate
            } else {
                nums[index] *= -1;
            }
        }

        return -1;
    }
}


LOGIC - check if it is already negative before multiplying it by -1. If it's already negative, that means you've already visited that element before, so you don't need to update it again.



/* ACCEPTED SOLUTION - SORTING */
class Solution {
    public int findDuplicate(int[] nums) {
        Arrays.sort(nums);
        for(int i=1;i<nums.length;i++){
            if(nums[i]==nums[i-1]) return nums[i];
        }
        return -1;   
    }
}
TC - O(nlog(n)+n) = O(nlogn)
LOGIC- Sort
EX) 3,1,3,4,2-> 1,2,3,3,4
Check for adjacent duplicates by scanning through 1,3,4,4,6,7 and notice 4 appears 2x
-therefore a duplicate exists

How can we prove that at least one duplicate number must exist in nums?
Points to note : question has n+1 elements. And numbers range from 1 to n. Then that means a repeated number will always exist.

NOTE : THE QUESTION ASK US TO NOT EDIT ARRAY nums. So, lets maintain the sanctity of the question and do just that.

/* BRUTE FORCE O(n^2) TLE ERROR */
class Solution {
    public int findDuplicate(int[] nums) {
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j]) return nums[i];
            }
        }
        return -1;
    }
}


/* BINARY * LINEAR SEARCH O(nlogn) */
class Solution {
    public int findDuplicate(int[] nums) {
        int l=1;
        int r=nums.length-1;
        while(l<=r){
            int mid = l+(r-l)/2;
            int count = 0;
            for(int i=0;i<nums.length;i++){
                if(nums[i]<=mid) count++;
            }
            if(count<=mid) l=mid+1;
            else r=mid-1;
        }
        return l;
    }
}

LOGIC - the key is to find an integer in the array [1,2,…,n] instead of finding an integer in the input array.
We can use the binary search algorithm, each round we guess one number, then scan the input array, narrow the search range, and finally get the answer.
According to the Pigeonhole Principle, n integers, placed in an array of length n+1, at least 1 integer will be repeated.
So guess a number first(the number mid in the valid range [left,right], count the elements of the array which is less than or equal to midmidmid in the array.
If count is strictly greater than mid. According to the Pigeonhole Principle, repeated elements are in the interval [left,mid];
Otherwise, the repeated element is in the interval [mid+1,right].

With extra O(1)O(1)O(1) space, without modifying the input.

/* A FAILED APPROACH */
class Solution {
    public int findDuplicate(int[] nums) {
        int n=nums.length;
        int sum=0;
        for(int i=0;i<nums.length;i++){ sum+=nums[i];}  //A witty approach but the question constraint outwits
        int ans=sum-(n*(n-1)/2);  //if considering pattern of testcase, 1,2,3,4,2.... 1to4 is sum of series and if subtract from sum of array we get duplicated... But... 
        return ans;
    }
}
Attention TESTCASE: [2, 2, 2, 2,2]. The problem statement says that all the integers in array are in the range of 1 to n , 
and only one number is repeated. But the problem doesn't say that the integer that is repeated, is repeated only twice, so the repeated integer can be repeated more than 
twice. They specifically mentioned this in the constraints => "All the integers in nums appear only once except for precisely one integer which appears two or more times."
Hence [2,2,2,2,2] is valid.
Even the XOR method will fail becuase of the above case.
