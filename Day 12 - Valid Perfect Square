/* BINARY SEARCH ACCEPTED SOLUTION */ (LONG TYPE)
//TC : O(log n) ;  SC : O(1)

class Solution {
    public boolean isPerfectSquare(int num) {
        long l=1, r=num;
        
        while(l<=r)
        {
            long mid=l+(r-l)/2;   //we have to use long for mid to avoid mid*mid from overflow

            if(mid*mid==num)    // check if mid is perfect square
                return true;
            if(mid*mid>num)
                r=mid-1;
            if(mid*mid<num)
                l=mid+1;
        }
        return false;
    }
}
// Note :  we have to use long for mid to avoid mid*mid from overflow. 
//Also, you can use long type for low and high to avoid type casting for mid from long to int. Otherwise we can also handle it by typecasting by taking
long nums = (long) num





/* Binary Search - Without Long Type */

class Solution {
    public boolean isPerfectSquare(int num) {
        int left = 1, right = num;
        while (left <= right) {
            int mid = left + (right - left) / 2; // to avoid overflow incase (left+right)>2147483647
            int res = num / mid, remain = num % mid;
            if (res == mid && remain == 0) return true; // check if mid * mid == num
            if (res > mid) { // mid is small -> go right to increase mid
                left = mid + 1;
            } else {
                right = mid - 1; // mid is large -> to left to decrease mid
            }
        }
        return false;
    }
}


/* Newton Method */
class Solution {
    public boolean isPerfectSquare(int num) {
        long t = num;
    while (t * t > num) {
        t = (t + num / t) / 2;  //x = (x + num / x) >> 1; using bit operation is faster and good practice
    }
    return t * t == num;
}
}


/* NEW LOGIC === A square number is 1+3+5+7+... */

class Solution {
    public boolean isPerfectSquare(int num) {
        if (num < 1) return false;
        
      for (int i = 1; num > 0; i += 2)
        num -= i;           // keep on subtracting 1 then 3, 5, 7, 9 if it becomes zero as long as num=>1 then we will return true
      return num == 0;      //will return true if num becomes zero
    }
}
//Time Complexity : O(sqrt(n))
Proof : Let x be the number of iterations needed to solve the problem, and let Σ be the sum from i = 1 to x. 
So, Σ(1 + 2i) = n => x + 2Σi = n => x + (x(x+1)) = n 
=> x^2 + 2x = n => x = [-1 +/- sqrt(1 + n)] => you can see that n is in a square root term, 
so the complexity should be O(sqrt(n)).

Proof of method : This is a math problem：
1 = 1
4 = 1 + 3
9 = 1 + 3 + 5
16 = 1 + 3 + 5 + 7
25 = 1 + 3 + 5 + 7 + 9
36 = 1 + 3 + 5 + 7 + 9 + 11
....
so 1+3+...+(2n-1) = (2n-1 + 1)n/2 = nn




/* Liner Search O(n) Solution - Time Limit Exceeded */
class Solution {
    public boolean isPerfectSquare(int num) {
        if(num==1) return true;
        for (int i=1; i<=num/2; i++)
       {
           if(i*i==num)
               return true;
       }
        return false;
    }
}


//for all solutions :  high = num / 2 : if you use this you will have to make seprate case for num=1 return true

//Binary search can be executed up to 46340 instead of 2147483647, because 46340 is the biggest perfect square that fits into Integer range
this will just make O(46340)

// AN ISSUE WITH BINARY SEARCH TIME COMPLEXITY DISCUSSION OPEN :
The time complexity of the binary search approach being O(log(N)) is misleading. 
Here, the input to the problem is a single integer N, which can be represented using log(N) bits. 
Therefore, the size of the input is not N, but log(N). 
This is in contrast to most other common problems where inputs are typically arrays or lists of length N, where it is pretty obvious that the size of the input is N. 
Now, the binary search approach for the valid square problem takes O(log(N)) time for an input of size (log(N)), meaning that this is a LINEAR TIME ALGORITHM !!

For those who want to counter this argument, 
please first check why proving that PRIMALITY TEST is solvable in polynomial time was so hard (https://en.wikipedia.org/wiki/AKS_primality_test).
The AKS primality test (also known as Agrawal–Kayal–Saxena primality test and cyclotomic AKS test) is a deterministic primality-proving algorithm created and published 
by Manindra Agrawal, Neeraj Kayal, and Nitin Saxena, computer scientists at the Indian Institute of Technology Kanpur, on August 6, 2002, 
in an article titled "PRIMES is in P".[1] The algorithm was the first that can provably determine whether any given number is prime or composite in polynomial time, 
without relying on mathematical conjectures such as the generalized Riemann hypothesis.

GFG - https://www.geeksforgeeks.org/aks-primality-test/
